# -*- coding: utf-8 -*-
"""Copy of logistic_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDUHS51d9rjEU7SiI5rUqwoOrSYh6uFU

# Logistic Regression

## Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Importing the dataset"""

sna=pd.read_csv('Social_Network_Ads.csv')
X=sna.iloc[:,:-1].values
y=sna.iloc[:,-1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2)
print(y_train)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
scx=StandardScaler()
X_train=scx.fit_transform(X_train)
X_test=scx.transform(X_test)

"""## Training the Logistic Regression model on the Training set"""

from sklearn.linear_model import LogisticRegression
lor=LogisticRegression(random_state=0)
lor.fit(X_train,y_train)

"""## Predicting a new result"""

y_pred=lor.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""## Predicting the Test set results"""

y_new=lor.predict(scx.transform([[46,22000]]))
print(y_new)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
arr=confusion_matrix(y_test,y_pred)
asd=accuracy_score(y_test,y_pred)
print(arr)
print(asd)

"""## Visualising the Training set results"""

from matplotlib.colors import ListedColormap
X_set, y_set = scx.inverse_transform(X_train), y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, lor.predict(scx.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

"""## Visualising the Test set results"""